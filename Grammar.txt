<Prog>        → <StmtList> ~~Prog

<StmtList>    → <Stmt> ; <StmtList>
            | ε

<Stmt>        → <VarDecl> ~~StmtVarDecl
            | <ConstDecl> ~~StmtConstDecl
            | <FuncDecl> ~~StmtFuncDecl
            | <IfStmt> ~~StmtIf
            | <WhileStmt> ~~StmtWhile
            | <ForStmt> ~~StmtFor
            | <Expr> ~~StmtExpr
            | <Comment> ~~StmtComment
            | <AssignExpr> ~~StmtAssign

<VarDecl>     → var ident : <Type> = <Expr> ~~VarDeclInit
            | var ident : <Type> ~~VarDeclNoInit

<ConstDecl>   → const ident : <Type> = <Expr> ~~ConstDecl

<FuncDecl>    → func ident ( <ParamList> ) : <Type> <Block> ~~FuncDecl

<ParamList>   → <Param> , <ParamList> ~~ParamListMulti
            | ε
<Param>       → ident : <Type> ~~Param

<Block>       → { <StmtList> } ~~Block

<IfStmt>      → if ( <Expr> ) <Block> ~~IfMain <ElseIfList> <ElseOpt> ~~IfStmt
<ElseIfList>  → elif ( <Expr> ) <Block> ~~ElseIf <ElseIfList>
            | ε
<ElseOpt>     → else <Block> ~~Else
            | ε

<WhileStmt>   → while ( <Expr> ) <Block> ~~WhileStmt

<ForStmt>     → for ( <ForInit> ; <ForCond> ; <ForUpdate> ) <Block> ~~ForStmt
<ForInit>     → <VarDecl> ~~StmtVarDecl
            | <AssignExpr> ~~StmtAssign
            | ε
<ForCond>     → <Expr> ~~StmtExpr
<ForUpdate>   → <AssignExpr> ~~StmtAssign

<AssignExpr>  → ident = <Expr> ~~Assign

<Comment>     → // .* ~~LineComment
            | /* .*? */ ~~BlockComment

<Expr>        → <RelExpr> ~~Expr

<RelExpr>     → <AddExpr> ~~RelExprSingle
            | <AddExpr> <RelOp> <AddExpr> ~~RelExprOp

<AddExpr>     → <MulExpr> ~~AddExprSingle
            | <MulExpr> <AddOp> <MulExpr> ~~AddExprOp

<MulExpr>     → <UnaryExpr> ~~MulExprSingle
            | <UnaryExpr> <MulOp> <UnaryExpr> ~~MulExprOp

<UnaryExpr>   → ! <UnaryExpr> ~~UnaryNot
            | & ident ~~UnaryAddr
            | * ident ~~UnaryDeref
            | <PrimaryExpr> ~~UnaryPrimary

<PrimaryExpr> → ident ~~PrimaryIdent
            | <Literal> ~~PrimaryLiteral
            | ( <Expr> ) ~~PrimaryParen
            | <CallExpr> ~~PrimaryCall
            | <FieldAccess> ~~PrimaryField
            | <ObjectExpr> ~~PrimaryObject
            | <ArrayExpr> ~~PrimaryArray
<CallExpr>    → ident ( <ArgList> ) ~~CallExpr

<ArgList>     → <Expr> , <ArgList> ~~ArgListMulti
            | <Expr> ~~ArgListSingle
            | ε ~~EmptyArgList
<FieldAccess> → <PrimaryExpr> . ident ~~FieldAccess

<ObjectExpr>  → { <FieldList> } ~~ObjectExpr

<FieldList>   → <Field> , <FieldList> ~~FieldListMulti
            | <Field> ~~FieldListSingle
            | ε ~~EmptyFieldList

<Field>       → ident : <Expr> ~~Field

<ArrayExpr>   → [ <ArrayElemList> ] ~~ArrayExpr

<ArrayElemList> → <Expr> , <ArrayElemList> ~~ArrayElemListMulti
            | <Expr> ~~ArrayElemListSingle
            | ε ~~EmptyArrayElemList

<Type>        → number ~~TypeNumber
            | boolean ~~TypeBoolean
            | string ~~TypeString
            | null ~~TypeNull
            | <Type>[] ~~TypeArray
            | ( <Type> ) => <Type> ~~TypeFunc
            | pointer <Type> ~~TypePointer
            | <ObjectType> ~~TypeObject

<ObjectType>  → { <FieldTypeList> } ~~ObjectType

<FieldTypeList> → <FieldType> , <FieldTypeList> ~~FieldTypeListMulti
            | <FieldType> ~~FieldTypeListSingle
            | ε ~~EmptyFieldTypeList

<FieldType>   → ident : <Type> ~~FieldType

<Literal>     → INT ~~LitInt
            | FLOAT ~~LitFloat
            | true ~~LitTrue
            | false ~~LitFalse
            | STRING ~~LitString
            | <ArrayExpr> ~~LitArray
            | null ~~LitNull
